name: Release

on:
  push:
    tags:
      - "*"

jobs:
  create-binary-deployment:
    name: Create binary deployment
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    outputs:
      environment_url: ${{ steps.deployment.outputs.environment_url }}
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    steps:
      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment
        with:
          token: "${{ github.token }}"
          log-url: https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}
          environment: gh-release-binaries
      - name: Update deployment status (in_progress)
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ github.token }}"
          environment-url: ${{ steps.deployment.outputs.environment_url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: "in_progress"
  
  build-binaries:
    needs: [create-binary-deployment]
    name: Build binaries
    permissions:
      deployments: write
    strategy:
      matrix:
        include:
          # linux x86
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            use-cross: false
            output: cargo-all-features
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            use-cross: true
            output: cargo-all-features
          # linux aarch64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            use-cross: true
            output: cargo-all-features
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            use-cross: true
            output: cargo-all-features
          # windows
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            use-cross: false
            output: cargo-all-features.exe
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            use-cross: false
            output: cargo-all-features.exe

          # macos
          - target: aarch64-apple-darwin
            os: macos-latest
            use-cross: false
            output: cargo-all-features
          - target: x86_64-apple-darwin
            os: macos-latest
            use-cross: false
            output: cargo-all-features

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Configure toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target ${{ matrix.target }} --release
          use-cross: ${{ matrix.use-cross }}
        env:
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
          CARGO_PROFILE_RELEASE_LTO: fat
          CARGO_PROFILE_RELEASE_OPT_LEVEL: 3
          CARGO_PROFILE_RELEASE_PANIC: abort
          CARGO_PROFILE_RELEASE_STRIP: symbols

      - name: Copy and rename utility
        run: cp target/${{ matrix.target }}/release/${{ matrix.output }} ${{ matrix.output }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cargo-all-features-${{ matrix.target }}
          path: ${{ matrix.output }}
      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ github.token }}"
          environment-url: ${{ needs.create-binary-deployment.outputs.environment_url }}
          deployment-id: ${{ needs.create-binary-deployment.outputs.deployment_id }}
          state: "failure"

  upload-binaries:
    name: Publish binaries
    needs: [build-binaries, create-binary-deployment]
    runs-on: ubuntu-latest
    permissions:
      deployments: write
      contents: write
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - aarch64-pc-windows-msvc
          - x86_64-pc-windows-msvc
          - aarch64-apple-darwin
          - x86_64-apple-darwin
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: cargo-all-features-${{ matrix.target }}

      - name: Compress (for win files)
        if: ${{ contains(matrix.target, 'windows') }}
        run: tar -cJf cargo-all-features-${{ matrix.target }}.txz  cargo-all-features.exe

      - name: Compress (for any other files)
        if: ${{ !contains(matrix.target, 'windows') }}
        run: tar -cJf cargo-all-features-${{ matrix.target }}.txz  cargo-all-features

      - name: Upload binary to release
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ github.token }}
          file: cargo-all-features-${{ matrix.target }}.txz
          asset_name: cargo-all-features-${{ matrix.target }}.txz
          tag: ${{ github.ref }}
          overwrite: true
          prerelease: true
      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ github.token }}"
          environment-url: ${{ needs.create-binary-deployment.outputs.environment_url }}
          deployment-id: ${{ needs.create-binary-deployment.outputs.deployment_id }}
          state: "failure"

  finish-binary-deployment:
    needs: [create-binary-deployment, upload-binaries]
    runs-on: ubuntu-latest
    permissions:
      deployments: write
    steps:
      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ github.token }}"
          environment-url: ${{ needs.create-binary-deployment.outputs.environment_url }}
          deployment-id: ${{ needs.create-binary-deployment.outputs.deployment_id }}
          state: "success"
